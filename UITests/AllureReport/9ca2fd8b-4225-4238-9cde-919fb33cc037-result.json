{"name": "test_valid_logins", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[normalize-space()='Login']\"}\n  (Session info: chrome=120.0.6099.110); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF69F1E82B2+55298]\n\t(No symbol) [0x00007FF69F155E02]\n\t(No symbol) [0x00007FF69F0105AB]\n\t(No symbol) [0x00007FF69F05175C]\n\t(No symbol) [0x00007FF69F0518DC]\n\t(No symbol) [0x00007FF69F08CBC7]\n\t(No symbol) [0x00007FF69F0720EF]\n\t(No symbol) [0x00007FF69F08AAA4]\n\t(No symbol) [0x00007FF69F071E83]\n\t(No symbol) [0x00007FF69F04670A]\n\t(No symbol) [0x00007FF69F047964]\n\tGetHandleVerifier [0x00007FF69F560AAB+3694587]\n\tGetHandleVerifier [0x00007FF69F5B728E+4048862]\n\tGetHandleVerifier [0x00007FF69F5AF173+4015811]\n\tGetHandleVerifier [0x00007FF69F2847D6+695590]\n\t(No symbol) [0x00007FF69F160CE8]\n\t(No symbol) [0x00007FF69F15CF34]\n\t(No symbol) [0x00007FF69F15D062]\n\t(No symbol) [0x00007FF69F14D3A3]\n\tBaseThreadInitThunk [0x00007FFD3BF87344+20]\n\tRtlUserThreadStart [0x00007FFD3DBC26B1+33]", "trace": "self = <TestCases.test_login.Test_Login object at 0x00000227709AB150>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"15580c590dc0cd3027a5c81554b919de\")>\n\n    @pytest.mark.login\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_valid_logins(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.driver.maximize_window()\n        self.driver.implicitly_wait(3)\n    \n        self.mp = MainPage(self.driver)\n        self.lp = LoginPage(self.driver)\n        self.dp = DashboardPage(self.driver)\n    \n        self.rows = XLUtils.getRowCount(self.path_LoginData, \"Sheet1\")\n        for r in range(2, self.rows + 1):\n            self.username = XLUtils.readData(self.path_LoginData, \"Sheet1\", r, 2)\n            self.password = XLUtils.readData(self.path_LoginData, \"Sheet1\", r, 3)\n            self.exp_result = XLUtils.readData(self.path_LoginData, \"Sheet1\", r, 4)\n    \n>           self.mp.click_login_btn()\n\nTestCases\\test_login.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\MainPage.py:14: in click_login_btn\n    self.driver.find_element(By.XPATH, self.btn_login_xpath).click()\nC:\\Users\\Yareek\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:740: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\Yareek\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000227709DD790>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF69F14D3A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD3BF87344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD3DBC26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[normalize-space()='Login']\"}\nE         (Session info: chrome=120.0.6099.110); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF69F1E82B2+55298]\nE       \t(No symbol) [0x00007FF69F155E02]\nE       \t(No symbol) [0x00007FF69F0105AB]\nE       \t(No symbol) [0x00007FF69F05175C]\nE       \t(No symbol) [0x00007FF69F0518DC]\nE       \t(No symbol) [0x00007FF69F08CBC7]\nE       \t(No symbol) [0x00007FF69F0720EF]\nE       \t(No symbol) [0x00007FF69F08AAA4]\nE       \t(No symbol) [0x00007FF69F071E83]\nE       \t(No symbol) [0x00007FF69F04670A]\nE       \t(No symbol) [0x00007FF69F047964]\nE       \tGetHandleVerifier [0x00007FF69F560AAB+3694587]\nE       \tGetHandleVerifier [0x00007FF69F5B728E+4048862]\nE       \tGetHandleVerifier [0x00007FF69F5AF173+4015811]\nE       \tGetHandleVerifier [0x00007FF69F2847D6+695590]\nE       \t(No symbol) [0x00007FF69F160CE8]\nE       \t(No symbol) [0x00007FF69F15CF34]\nE       \t(No symbol) [0x00007FF69F15D062]\nE       \t(No symbol) [0x00007FF69F14D3A3]\nE       \tBaseThreadInitThunk [0x00007FFD3BF87344+20]\nE       \tRtlUserThreadStart [0x00007FFD3DBC26B1+33]\n\nC:\\Users\\Yareek\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException"}, "start": 1703262356817, "stop": 1703262364104, "uuid": "91ae1a6d-4eda-4480-88b4-29919d4cbba5", "historyId": "21669a606b4f25800cd95bf439b7459b", "testCaseId": "21669a606b4f25800cd95bf439b7459b", "fullName": "TestCases.test_login.Test_Login#test_valid_logins", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_Login"}, {"name": "host", "value": "DESKTOP-D6LG47N"}, {"name": "thread", "value": "21744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_login"}]}